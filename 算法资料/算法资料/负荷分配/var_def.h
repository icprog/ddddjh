//********this struct is defined for the data acquisition of readin_data subroutine************
#ifndef VAR_DEF_H
#define VAR_DEF_H
#define NUM_FLAT 400
#define UN_ID_LEN 22
#define UN_NAME_LEN 42
#define FAC_ID_LEN 22

typedef struct price_struct 
{
	float price;
	int out_power;
	float fac_used_ratio;
	int   group_id;
	char   un_id[UN_ID_LEN];	//机组ID
	char   un_name[UN_NAME_LEN];	//机组名称
}price_struct;
//price_struct fee_ave[NUM_UN][NUM_POINT];
price_struct *fee_ave;
price_struct *fee_ave_bak;
int un_num;
int *point_num;
float max_lmt;//the max value of qe.
float min_lmt;// the min value of qe.	
float max_p;//the max value of power generated by all units;
float min_p;//the min value of power generated by all units;
float ave_lmt;//which means the value of qe that to be calculated dynamically.
float det_lmt;//the value of modification of ave_lmt in dynamic calculation.
float lmt_plus;//the positive value of 
float lmt_minus;
float lmt_up;
float lmt_down;
float *p_each;
float p_sum;
float det_p;
float pload;
float pjcyl;
int circul_num;
int vertical_num;
typedef struct flat_line_struct
{
	int un_id;
	int point_id;
	int point_id_end;//to record the hori_line's end point;
	int point_num;//to record the num of points in the same hori_line;
	int flat_flag;//0 means the original flag;1 means the modified flag;
}flat_struct;
flat_struct flat_para[NUM_FLAT];
float *price_each;
float edge_price;
float max_edge_price;
int  sd_id;
float accuracy;
FILE *fp;
int total_sd;
char month[3],day[3],year[5];
typedef struct generator_struct
{
	char rq_date[12];
	int  time_block_id;
	char un_id[UN_ID_LEN];
	char un_name[UN_NAME_LEN];
	int  real_power;
	int  plus_adjust_power;
	int  minus_adjust_power;
	float gen_power;
	float price_for_gen;
	float price_for_power;
	float fac_used_ratio;
}bid_gen_struct;
bid_gen_struct *bid_gen;
int total_bid_un_num;//the gen_num in the table of jzbj.
char present_date[12];

typedef struct unit_struct
{
	char rq_date[12];
	int  time_block_id;
	char un_id[UN_ID_LEN];
	char un_name[UN_NAME_LEN];
	int  real_power;
	int  plus_adjust_power;
	int  minus_adjust_power;
	float gen_power;
	float price_for_gen;
}bid_un_struct;
bid_un_struct *basic_un;
int basic_un_num;

typedef struct gen_to_un_struct
{
	char gen_id[UN_ID_LEN];
	char gen_name[UN_NAME_LEN];
	char fac_id[FAC_ID_LEN];
	char unit_id[UN_ID_LEN];
	char unit_name[UN_NAME_LEN];
}gen_to_unit_struct;
gen_to_unit_struct *gen_to_unit;
int total_gen_unit_num;
char constrain_flag[4];

//********************this struct is for the loss factor struct *******************
typedef struct factor_struct
{
	char gen_id[UN_ID_LEN];
	float region_loss_factor;
	float within_region_loss_factor;
	float distribution_loss_factor;
}loss_factor_struct;
loss_factor_struct *gen_loss_factor;
//**********************************************************************************

int basic_load;
int interconnect_line_load;

char exe_date[12];
char exe_time[12];
char program_id[22];
char program_name[42];
char result_info[10];
char result_info_explain[252];

int result_correct;

/*
int qt_curve_load_sum;
int num_of_qt_curve_load;
typedef struct 
{
	char un_id[UN_ID_LEN];
	int  out_power;
}qt_curve_load_struct;
qt_curve_load_struct *qt_curve_load;
*/

//************************the following is added by zzg on Feb 24 to deal with the start_shut curve******
typedef struct
{
	char un_id[UN_ID_LEN];
	int out_power;
	int sd_id;
}start_shut_curve_struct;
start_shut_curve_struct start_shut_curve_array[480];
int num_of_start_shut_curve_array;

typedef struct
{
	char un_id[UN_ID_LEN];
	int  sd_id;
	int  run_state;
}unit_run_state_struct;
unit_run_state_struct unit_run_state_array[5000];
int num_of_unit_run_state_array;

int num_of_unit_run_state_change_info;
typedef struct
{
	char un_id[UN_ID_LEN];
	int  sd_id;
	int  start_or_shut_flag;//0 means start,1 means shut;
}unit_run_state_change_info_struct;
unit_run_state_change_info_struct unit_run_state_change_info[100];

int start_shut_curve_load_sum;
//****************************************************************************************

char user_id[12];
char user_name[12];

//**************************this code is for form the up_down_limit table for the use of ssdd****************
typedef struct
{
        char un_id[UN_ID_LEN];
        int  up_limit;
        int  down_limit;
}up_down_limit_struct;
up_down_limit_struct *up_down_limit_array;
int num_of_up_down_limit_array;
int limit_not_exist_flag;
//********************************the end********************************************************************

int total_edge_unit_num;
int edge_unit_array[100];

//*************************this code is for the defined fre_adjust method************************************
int num_of_defined_fre_adjust_array;
int num_of_defined_man_adjust_array;
typedef struct
{
	char un_id[UN_ID_LEN];
	int  id_num;
	int  out_power;
}defined_fre_adjust_struct;
defined_fre_adjust_struct defined_fre_adjust_array[50];
int un_num_bak;
int *point_num_bak;
//****************************************defined fre_adjust end*********************************************

int num_of_defined_amount_gen;
typedef struct defined_amount_gen_struct
{
	char un_id[UN_ID_LEN];
	int  real_power;
	int  plus_adjust_power;
	int  minus_adjust_power;
	float gen_power;
}defined_amount_gen_struct;
defined_amount_gen_struct *defined_amount_gen_array;

int write_database_flag;

#endif
